version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pixisphere-db
    environment:
      POSTGRES_DB: pixisphere_db
      POSTGRES_USER: pixisphere
      POSTGRES_PASSWORD: pixisphere123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pixisphere -d pixisphere_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: pixisphere-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server
  api:
    build: .
    container_name: pixisphere-api
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://pixisphere:pixisphere123@postgres:5432/pixisphere_db
      JWT_SECRET: pixisphere-super-secret-jwt-key-production-2024
      JWT_EXPIRES_IN: 7d
      PORT: 3000
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      MOCK_OTP_ENABLED: true
      MOCK_FILE_UPLOAD: true
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
